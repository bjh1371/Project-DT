////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file PacketManager.cpp
/// \author 
/// \date 2014.10.24
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "PacketManager.h"

#include "PacketHandler.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 생성자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CPacketManager::CPacketManager()
{
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CPacketManager::~CPacketManager()
{
	for (int i = 0; i < PACKET_GROUP_MAX; ++i)
	{
		CPacketHandlerMap& handlerMap = m_HandlerMap[i];
		for (auto& element : handlerMap)
		{
			CPacketHandler* handler = element.second;
			xdelete(handler);
		}
	}
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 핸들러를 추가한다.
/// \param handler 추가할 핸들러
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CPacketManager::AddHandler(PacketGroup g, CPacketHandler* handler)
{
	CPacketHandlerMap& handlerMap = m_HandlerMap[g];
	auto itr(handlerMap.find(handler->GetPacketId()));
	if (itr == handlerMap.end())
	{
		handlerMap.insert(CPacketHandlerMap::value_type(handler->GetPacketId(), handler));
	}
	else
	{
		TRACE(_T("duplicated hanler : %a"), handler->GetPacketId());
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 핸들러를 얻는다.
/// \param id 얻을 ID
/// \return CPacketHandler* 핸들러
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CPacketHandler* CPacketManager::GetHandler(PacketGroup g, PacketId_t id)
{
	CPacketHandlerMap& handlerMap = m_HandlerMap[g];
	CPacketHandler* handler = nullptr;
	auto itr(handlerMap.find(id));
	if (itr != handlerMap.end())
	{
		handler = itr->second;
	}
	return handler;
}