////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file PacketManager.h
/// \author 
/// \date 2014.10.24
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Packet/PacketBase.h"

#include "Base/Singleton.h"

class CPacketHandler;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class CPacketManager
/// \brief 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CPacketManager : public CSingleton<CPacketManager>
{
	DECLARE_SINGLETON_INTERFACE(CPacketManager)


private:
	typedef std::unordered_map<PacketId_t, CPacketHandler*> CPacketHandlerMap;
	

	CPacketHandlerMap m_HandlerMap[PACKET_GROUP_MAX];


public:
	/// \brief 핸들러를 추가한다.
	void AddHandler(PacketGroup g, CPacketHandler* handler);

	/// \brief 핸들러를 얻는다.
	CPacketHandler* GetHandler(PacketGroup g, PacketId_t id);
};

#define g_PacketManager CPacketManager::GetInstance()