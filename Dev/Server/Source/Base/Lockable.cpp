////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file Lockable.cpp
/// \author 
/// \date 2014.11.7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Lockable.h"

#include "ThreadRegistry.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CLockable::BeforeLock()
{
	if (m_OwingThreadIndex == GetCurrentThreadId())
	{
		assert(false && "self dead lock");
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CLockable::AfterLock()
{
	m_OwingThreadIndex = GetCurrentThreadId();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CLockable::AfterUnLock()
{
	m_OwingThreadIndex = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CLockable::BeforeUnLock()
{

}
