////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file AsyncTcpSocketPool.cpp
/// \author bjh1371
/// \date 2015/09/04
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "AsyncTcpSocketPool.h"

#include "AsyncTcpSocket.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 생성자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAsyncTcpSocketPool::CAsyncTcpSocketPool()
:
m_Queue(),
m_AllocCount(0)
{
	SafeGuard();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAsyncTcpSocketPool::~CAsyncTcpSocketPool()
{
	SafeGuard();

	// 모든 소켓 정리
	for (int delCount = 0; delCount < m_AllocCount;)
	{
		CAsyncTcpSocket* socket = nullptr;
		while (m_Queue.try_pop(socket))
		{
			if (socket)
			{
				xdelete(socket);
				++delCount;
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 소켓을 할당한다.
/// \return CAsyncTcpSocket* 할당된 소켓
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAsyncTcpSocket* CAsyncTcpSocketPool::Pop()
{
	SafeGuard();

	size_t size = m_Queue.unsafe_size();
	CAsyncTcpSocket* socket = nullptr;

	for (int i = 0; i < size; ++i)
	{
		if (m_Queue.try_pop(socket))
		{
			// 사용 가능소켓이면 이 소켓사용
			if (socket->IsFreeSocket())
			{
				socket->SetPeer(nullptr);
				break;
			}
			else if (socket->IsLongPendingSocket())
			{
				socket->ForceClose();
			}

			// 다시 집어넣는다.
			m_Queue.push(socket);
		}
		else
		{
			break;
		}

		socket = nullptr;
	}

	if (!socket)
	{
		socket = xnew(CAsyncTcpSocket);
		InterlockedIncrement64(&m_AllocCount);
	}

	return socket;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 소켓을 큐에 넣는다.
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CAsyncTcpSocketPool::Push(CAsyncTcpSocket* socket)
{
	SafeGuard();

	m_Queue.push(socket);
}

CAsyncTcpSocketPool* g_AsyncTcpSocketPool = nullptr;