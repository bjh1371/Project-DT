////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file ThreadRegistry.cpp
/// \author 
/// \date 2014.10.31
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "ThreadRegistry.h"

namespace
{
	__declspec(thread) long t_ThreadIndex = -1;

	volatile long g_ThreadRegistry = -1;
}

DWORD g_ThreadIndexToId[MAX_THREAD_COUNT] = {0, };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 스레드 인덱스를 할당한다.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AllocateThreadIndex()
{
	if (t_ThreadIndex < 0)
	{
		t_ThreadIndex = _InterlockedIncrement(&g_ThreadRegistry);
		g_ThreadIndexToId[t_ThreadIndex] = GetCurrentThreadId();
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 현재 스레드 인덱스를 반환한다.
/// \return long 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
long GetCurrentThreadIndex()
{
	if (t_ThreadIndex < 0)
	{
		assert(false && "invalid thread index");
	}

	return t_ThreadIndex;
}