////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file AsyncTcpEvent.cpp
/// \author bjh1371
/// \date 2015/07/02
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "AsyncTcpEvent.h"

#include "AsyncTcpEventPool.h"
#include "AsyncTcpSocket.h"

namespace
{
	volatile long long g_AllocCount = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 생성자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAsyncTcpEvent::CAsyncTcpEvent(int capacity)
:
m_Capacity(capacity),
m_TotalBytes(0),
m_OpType(OP_MAX),
m_Buf(nullptr),
m_WsaBuf(),
m_DisconReason(DR_MAX)
{
	SafeGuard();

	m_Buf = xnew_array(char, capacity);

	m_WsaBuf.buf = m_Buf;
	m_WsaBuf.len = m_Capacity;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAsyncTcpEvent::~CAsyncTcpEvent()
{
	SafeGuard();

	Generic::SafeDeleteArray(m_Buf);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 실행
/// \param bool success 성공 여부
/// \param DWORD transferred 받은 바이트
/// \param CAsyncEventSink * sink 이벤트를 던진 싱크
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CAsyncTcpEvent::Execute(bool success, DWORD transferred, ULONG_PTR target)
{
    SafeGuard();

	CAsyncTcpSocket* socket = nullptr;

	// AcceptEvent의 경우 tcpSink는 PostAccept시 셋팅해준 m_Owner
	if (m_OpType == OP_ACCEPT)
	{
		socket = m_Owner;
	}
	else
	{
		socket = reinterpret_cast<CAsyncTcpSocket*>(target);
	}

	switch (m_OpType)
	{
	case OP_RECV:
		socket->OnRecvEvent(success, transferred, this);
		break;
	case OP_SEND:
		socket->OnSendEvent(success, transferred, this);
		break;
	case OP_CONNECT:
		socket->OnConnectEvent(success, this);
		break;
	case OP_ACCEPT:
		socket->OnAcceptEvent(success, this);
		break;
	case OP_DISCONNECT:
		socket->OnDisconnectEvent(success, this, m_DisconReason);
		break;
	default:
		assert(false && "op mode is invalid");
		break;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CAsyncTcpEvent::Reset()
{
	SafeGuard();

	m_TotalBytes = 0;
	memset(m_Buf, 0, m_Capacity);
	
	m_WsaBuf.buf = m_Buf;
	m_WsaBuf.len = m_Capacity;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 메모리를 할당한다.
/// \param int capacity 할당할 크기
/// \return CAsyncTcpEvent*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CAsyncTcpEvent* CAsyncTcpEvent::Alloc(int capacity)
{
	SafeGuard();

	InterlockedIncrement64(&g_AllocCount);

	return g_AsyncTcpEventPool->Alloc(capacity);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 메모리 할당을 해제 한다.
/// \param CAsyncTcpEvent * evt 해제할 이벤트
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CAsyncTcpEvent::Dealloc(CAsyncTcpEvent* evt)
{
	SafeGuard();

	InterlockedDecrement64(&g_AllocCount);

	g_AsyncTcpEventPool->Dealloc(evt);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 
/// \return int
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int CAsyncTcpEvent::GetCurrentEvent()
{
	return static_cast<int>(g_AllocCount);
}
