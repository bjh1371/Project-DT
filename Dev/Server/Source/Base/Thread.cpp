////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file Thread.cpp
/// \author bjh1371
/// \date 2015/09/04
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Thread.h"

#include "ThreadRegistry.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 생성자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CThread::CThread()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CThread::~CThread()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 쓰레드 시작
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CThread::Start()
{
	m_Thread = std::thread(&CThread::ThreadProxy, this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 쓰레드 끝날때까지 기다림
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CThread::Join()
{
	if (m_Thread.joinable())
	{
		m_Thread.join();
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 핸들 분리
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CThread::Detach()
{
	m_Thread.detach();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 
/// \return void
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CThread::ThreadProxy()
{
	// 쓰레드 인덱스 할당
	AllocateThreadIndex();

	/// \brief 실제 작업 스레드
	ThreadMain();
}
