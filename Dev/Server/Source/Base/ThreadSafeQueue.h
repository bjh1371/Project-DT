////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file ThreadSafeQueue.h
/// \author bjh1371
/// \date 2015/07/09
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Lockable.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class CThreadSafeQueue
/// \brief List를 이용해서 MPSC 큐를 구현
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
class CThreadSafeQueue : public stx::list<T>
{
private:
	typedef stx::list<T> CQueue;

	CQueue           m_Queue; ///< 데이터가 저장된 큐
	CCriticalSection m_Lock;  ///< 컨테이너 보호 락


public:
	/// \brief 생성자
	CThreadSafeQueue() { }
	
	/// \brief 소멸자
	~CThreadSafeQueue() { }
	
	
public:
	/// \brief 아이템을 추가한다.
	void Add(const T& item)
	{
		CScopeLock lock(m_Lock);
		m_Queue.push_back(item);
	}


public:
	/// \brief 팬딩된 아이템을 가져온다.
	void AcceptPendingItem()
	{
		CScopeLock lock(m_Lock);
		splice(end(), m_Queue);
	}
};